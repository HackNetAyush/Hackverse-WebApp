To implement the "like post" functionality with MongoDB and JWT (JSON Web Tokens) in your social app, you'll need to follow a few steps. This involves setting up the backend with MongoDB to store likes, updating the frontend to manage likes, and securing the API with JWT for authentication.

Overview of the steps:
Backend Setup: Create an API to handle liking a post.

Authenticate using JWT.
Update the post document in MongoDB to track likes.
Frontend Update: Use the like functionality in your React component and connect to the backend.

Step 1: Backend Setup
1.1. Set up MongoDB model
In your backend, you will need to have a model for posts, including a field to track the users who have liked each post. Assuming you're using Mongoose for MongoDB, here's an example of how to set up your post model:

javascript
Copy code
const mongoose = require("mongoose");

const postSchema = new mongoose.Schema(
  {
    uploadedBy: { type: String, required: true },
    title: { type: String, required: true },
    description: { type: String },
    imgUrl: { type: String },
    likes: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
      },
    ],
    createdAt: { type: Date, default: Date.now },
  },
  { timestamps: true }
);

const Post = mongoose.model("Post", postSchema);

module.exports = Post;
1.2. Create a Like API endpoint
Next, you'll need an API endpoint that will handle liking a post. It should check if the user is already authenticated and if the user has already liked the post.

javascript
Copy code
const express = require("express");
const Post = require("../models/Post");
const jwt = require("jsonwebtoken");
const router = express.Router();

// Middleware to verify JWT
const verifyToken = (req, res, next) => {
  const token = req.headers["authorization"]?.split(" ")[1];

  if (!token) {
    return res.status(403).json({ message: "No token provided" });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) {
      return res.status(403).json({ message: "Invalid or expired token" });
    }
    req.userId = decoded.userId; // Attach the user ID to the request
    next();
  });
};

// Like a post
router.post("/like/:postId", verifyToken, async (req, res) => {
  const { postId } = req.params;
  const userId = req.userId; // From JWT token

  try {
    // Find the post by ID
    const post = await Post.findById(postId);

    if (!post) {
      return res.status(404).json({ message: "Post not found" });
    }

    // Check if the user has already liked the post
    if (post.likes.includes(userId)) {
      return res.status(400).json({ message: "You have already liked this post" });
    }

    // Add user to the likes array
    post.likes.push(userId);
    await post.save();

    return res.status(200).json({ message: "Post liked successfully", likes: post.likes.length });
  } catch (error) {
    return res.status(500).json({ message: "Server error", error });
  }
});

module.exports = router;
1.3. JWT Authentication
Make sure you have JWT authentication set up in your app, so that users can login and generate JWT tokens. You can use the jsonwebtoken package to create and verify tokens.

For example, when a user logs in:

javascript
Copy code
const jwt = require("jsonwebtoken");

const generateToken = (userId) => {
  return jwt.sign({ userId }, process.env.JWT_SECRET, { expiresIn: "1h" });
};
Step 2: Frontend Update
2.1. Handle the like button click
You need to update your Post component to make a request to the backend API to like the post.

Here's how you can handle the like functionality in the Post component:

Add state for managing likes.
Send a request to the backend when the like button is clicked.
Update the UI based on the response.
Here's an updated version of your Post component that includes the like functionality:

javascript
Copy code
import React, { useContext, useState } from "react";
import { Card, CardHeader, CardBody, Image } from "@nextui-org/react";
import { Avatar, AvatarGroup } from "@nextui-org/react";
import { User } from "@nextui-org/react";
import { FiHeart } from "react-icons/fi";
import { Button } from "@nextui-org/react";
import { AiOutlineComment } from "react-icons/ai";
import { RiSendPlaneLine } from "react-icons/ri";
import { DarkModeContext } from "../Contexts/DarkModeContext";
import axios from "axios"; // Axios for HTTP requests

const Post = (props) => {
  const dmc = useContext(DarkModeContext);
  const darkMode = dmc.DarkMode;

  const [liked, setLiked] = useState(props.isLiked);
  const [likesCount, setLikesCount] = useState(props.likes);
  const [imageSize, setImageSize] = useState("object-cover");

  const [expanded, setExpanded] = useState(0);

  var imgUrl = props.imgUrl;
  var postTimestamp = props.createdAt;

  const truncatedStyle = {
    overflow: "hidden",
    display: "-webkit-box",
    WebkitLineClamp: 3,
    WebkitBoxOrient: "vertical",
  };

  const handleImageSize = () => {
    if (imageSize === "object-cover") {
      setImageSize("object-contain");
    } else if (imageSize === "object-contain") {
      setImageSize("object-cover");
    }
  };

  const calculatePostAge = (postTimestamp) => {
    const postDate = new Date(postTimestamp);
    const now = new Date();

    const diffInSeconds = Math.floor((now - postDate) / 1000);

    let interval = Math.floor(diffInSeconds / 31536000);
    if (interval >= 1) {
      return `${interval} year${interval > 1 ? "s" : ""} ago`;
    }

    interval = Math.floor(diffInSeconds / 2592000);
    if (interval >= 1) {
      return `${interval} month${interval > 1 ? "s" : ""} ago`;
    }

    interval = Math.floor(diffInSeconds / 86400);
    if (interval >= 1) {
      return `${interval} day${interval > 1 ? "s" : ""} ago`;
    }

    interval = Math.floor(diffInSeconds / 3600);
    if (interval >= 1) {
      return `${interval} hour${interval > 1 ? "s" : ""} ago`;
    }

    interval = Math.floor(diffInSeconds / 60);
    if (interval >= 1) {
      return `${interval} minute${interval > 1 ? "s" : ""} ago`;
    }

    return `${diffInSeconds} second${diffInSeconds !== 1 ? "s" : ""} ago`;
  };

  const age = calculatePostAge(postTimestamp);

  const handleLike = async () => {
    try {
      // Send a POST request to like the post
      const response = await axios.post(
        `/api/like/${props.post_uid}`, // Update with your backend URL
        {},
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("jwt")}`, // Assuming you store JWT in localStorage
          },
        }
      );
      
      // Update like state
      if (response.status === 200) {
        setLiked(true);
        setLikesCount(likesCount + 1); // Increment the like count
      }
    } catch (error) {
      console.error("Error liking post", error);
    }
  };

  return (
    <div
      data-postid={props.post_uid}
      className="w-full flex items-center justify-center"
    >
      <div className="sm:min-w-[370px] sm:max-w-[500px] min-w-[96%] sm:mt-3">
        <Card className=" mt-3 h-full box-border">
          <CardHeader className="py-3 px-4 flex-row items-center box-border">
            <div className="avatar_div flex items-center w-1/2">
              <User
                name={props.uploadedBy}
                description={`@${props.username}`}
                avatarProps={{
                  src: "https://i.pravatar.cc/150?u=a04258114e29026702d",
                }}
              />
            </div>
            <div className="options_div w-1/2 h-full flex items-center justify-end">
              <Button className="flex items-center justify-center" color="primary" radius="full" size="md" variant="solid">
                Follow
              </Button>
            </div>
          </CardHeader>

          <CardBody className="overflow-visible py-2 w-full flex items-center">
            {imgUrl ? (
              <div className="image_container object-cover rounded-xl !max-w-full !w-full aspect-square flex items-center justify-center">
                <Image
                  alt="Card background"
                  className={`${imageSize} rounded